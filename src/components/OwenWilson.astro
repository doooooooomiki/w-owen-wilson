---

---

<p>it's me owen wilson</p>

<owen-wilson>
  <button>
    <img src="/owen.webp" alt="">
  </button>
</owen-wilson>

<script>
  class OwenWilson extends HTMLElement {
    constructor() {
      super();
      this._audioCtx = null;
    }

    get button() {
      return this.querySelector('button');
    }

    get audioCtx() {
      return this._audioCtx;
    }

    set audioCtx(val) {
      this._audioCtx = val;
    }

    async init() {
      this.audioCtx = new AudioContext();

      const wow = await this.fetchFromOwenWilsonWowApi(1);
      const url = wow[0].audio;

      this.playWowFromUrl(url);
      
      this.button.addEventListener('click', this.onClick.bind(this));
      this.removeEventListener('click', this.init);
    }

    async fetchFromOwenWilsonWowApi(n = 1) {
      const url = `https://owen-wilson-wow-api.herokuapp.com/wows/random?results=${n}`;
      const res = await fetch(url);
      return res.ok 
        ? await res.json()
        : Promise.reject(new Error(`${res.status}`));
    }

    async createAudioBuffer(url) {
      const wow = await fetch(url);
      const arrayBuffer = await wow.arrayBuffer();
      const audioBuffer = await this.audioCtx.decodeAudioData(arrayBuffer);
      return audioBuffer;
    }

    async createSourceNode(url) {
      const sourceNode = await this.audioCtx.createBufferSource();
      sourceNode.buffer = await this.createAudioBuffer(url);
      return sourceNode;
    }

    async playWowFromUrl(url) {
      if (this.audioCtx.state === 'suspended') this.audioCtx.resume();
      const node = await this.createSourceNode(url);
      node.connect(this.audioCtx.destination);
      node.start();
    }

    async onClick() {
      const wow = await this.fetchFromOwenWilsonWowApi(1);
      const url = wow[0].audio;
      this.playWowFromUrl(url);
    }

    connectedCallback() {
      this.addEventListener('click', this.init);
    }

  }
  customElements.define("owen-wilson", OwenWilson);
</script>