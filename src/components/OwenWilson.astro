---
---

<owen-wilson>
  <img src="/owen.png" />
</owen-wilson>

<script>
  class OwenWilson extends HTMLElement {
    constructor() {
      super();
      this._audioCtx = null;
    }

    get audioCtx() {
      return this._audioCtx;
    }

    set audioCtx(val) {
      this._audioCtx = val;
    }

    async initAudio() {
      this.audioCtx = new AudioContext();

      /* 
      // After creating the new audio context it must be used
      // so we can reuse it later again (looking at you Safari on iOS).
      // It is indeed used in this method via the playWowFromUrl method
      // But it's not working like this (looking at you Safari on iOS)
      // I don't know if it's the async await or the use in another method
      // Aaaaand I spend too much time on this issue..
      // so here we are. It's working like this
      */
      const miniminisupershortnoise = this.audioCtx.createOscillator();
      miniminisupershortnoise.connect(this.audioCtx.destination);
      miniminisupershortnoise.start();
      miniminisupershortnoise.stop(this.audioCtx.currentTime + 0.000000001);
      miniminisupershortnoise.disconnect();

      const url = await this.getUrlToWowAudio();
      this.playWowFromUrl(url);

      this.addEventListener("click", this.onClick.bind(this));
      this.removeEventListener("click", this.initAudio);
    }

    async getUrlToWowAudio() {
      const wow = await this.fetchFromOwenWilsonWowApi(1);
      const url = wow[0].audio;
      return url;
    }

    async fetchFromOwenWilsonWowApi(n = 1) {
      const url = `https://owen-wilson-wow-api.herokuapp.com/wows/random?results=${n}`;
      const res = await fetch(url);
      return res.ok
        ? await res.json()
        : Promise.reject(new Error(`${res.status}`));
    }

    async createAudioBuffer(url) {
      const wow = await fetch(url);
      const arrayBuffer = await wow.arrayBuffer();
      const audioBuffer = await this.audioCtx.decodeAudioData(arrayBuffer);
      return audioBuffer;
    }

    async createSourceNode(url) {
      const sourceNode = await this.audioCtx.createBufferSource();
      sourceNode.buffer = await this.createAudioBuffer(url);
      return sourceNode;
    }

    async playWowFromUrl(url) {
      if (this.audioCtx.state === "suspended") this.audioCtx.resume();
      const node = await this.createSourceNode(url);
      node.connect(this.audioCtx.destination);
      node.start();
    }

    async onClick() {
      this.getUrlToWowAudio()
        .then((url) => this.playWowFromUrl(url))
        .catch((err) => console.log(err));
    }

    randomNumber(min, max) {
      return Math.floor(Math.random() * (max - min)) + min;
    }

    randomColor() {
      const colors = ["red", "green", "blue"];
      return colors[Math.floor(Math.random() * colors.length)];
    }

    writeWow(event) {
      const color = this.randomColor();

      const clone = window.wow.content.cloneNode(true);
      const wow = clone.querySelector(".wow");

      wow.classList.add(`svg-${color}`);
      wow.style.left = `${this.randomNumber(0, window.innerWidth)}px`;
      wow.style.top = `${this.randomNumber(0, window.innerHeight)}px`;

      document.body.append(clone);
    }

    temporaryScaling() {
      this.classList.toggle("is-clicked");
      setTimeout(() => this.classList.toggle("is-clicked"), 200);
    }

    connectedCallback() {
      this.addEventListener("click", this.initAudio);
      this.addEventListener("click", this.writeWow);
      this.addEventListener("click", this.temporaryScaling);
    }
  }
  customElements.define("owen-wilson", OwenWilson);
</script>
